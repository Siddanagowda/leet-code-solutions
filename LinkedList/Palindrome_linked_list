/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        ListNode *slow = head;
        ListNode *fast = head;

        while(fast && fast->next){
            slow = slow->next;
            fast = fast->next->next;
        }
        
        ListNode *SecondHalf = reverseList(slow);
        ListNode *FirstHalf = head;

        while(SecondHalf){
            if(FirstHalf->val != SecondHalf->val){
                return false;
            }
            FirstHalf = FirstHalf->next;
            SecondHalf = SecondHalf->next;
        }
        return true;
    }
private:
    ListNode* reverseList(ListNode* head) {
        ListNode *prev = nullptr, *after = nullptr;
        while(head){
            after = head->next;
            head->next = prev;
            prev = head;
            head = after;
        }
        return prev;
    }
};